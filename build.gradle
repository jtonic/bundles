apply plugin: 'maven'

group = "ro.jtonic.bundles"
version = "0.0.1-SNAPSHOT"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven {
            url "http://dl.bintray.com/kategory/maven"
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'kotlin-noarg'
    apply plugin: "io.gitlab.arturbosch.detekt"

    [compileJava, compileTestJava]*.configure {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
    }

    [compileKotlin, compileTestKotlin]*.configure {
        kotlinOptions {
            suppressWarnings = true
            languageVersion = kotlinLanguageVersion
            apiVersion = kotlinApiVersion
            jvmTarget = kotlinJvmTarget
            javaParameters = true
            incremental = true
            freeCompilerArgs = ["-Xjsr305=strict", "-Xenable-jvm-default"]
        }
    }
    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion") {
            force = true
        }
        compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion") {
            force = true
        }
        compile "com.google.code.findbugs:jsr305:$findBugsVersion"
        compile("io.kotlintest:kotlintest:$kotlinTestVersion") {
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-reflect'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        }
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutinesVersion"

        compile "io.arrow-kt:arrow-free:$arrowVersion"
        compile "io.arrow-kt:arrow-core:$arrowVersion"
        compile "io.arrow-kt:arrow-data:$arrowVersion"
        compile "io.arrow-kt:arrow-instances-data:$arrowVersion"
        compile "io.arrow-kt:arrow-syntax:$arrowVersion"
    }


    detekt {
        version = detektVersion

        profile("main") {
            input = "$projectDir/src/main/java"
            config = "$rootDir/detekt.yml"
            disableDefaultRuleSets = false
            output = "$buildDir/reports/detekt"
            outputName = "bundles"
            // baseline = "$project.projectDir/reports/baseline.xml" // If present all current findings are saved in a baseline.xml to only consider new code smells for further runs.
            parallel = true // Use this flag if your project has more than 200 files.
        }
    }
}

configurations.all {
    resolutionStrategy {
        force("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")
        force("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = project.gradleVersion
    distributionType = Wrapper.DistributionType.ALL
    //    distributionUrl = "gradle-$gradleVersion-all.zip"
    distributionUrl = "http://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}
